// Code generated by tygo. DO NOT EDIT.

//////////
// source: app_installation.go

/**
 * TODO some fields should be ignored by the REST api
 */
export interface AppInstallation {
  id: string;
  user_id: string;
  name: string;
  version: string;
  Package?: Package;
}
/**
 * AppInstallationConfig is a struct to hold the configuration for a docker container
 * Most of these types are taken directly from the Docker Go SDK
 */
export interface AppInstallationConfig {
  /**
   * ExposedPorts is a slice of ports exposed by the docker container
   */
  exposed_ports: string[];
  /**
   * Env is a slice of environment variables to be set in the container, specified as KEY=VALUE
   */
  env: string[];
  /**
   * PortBindings is a map of ports to bind on the host to ports in the container. Host IPs can be specified as well
   */
  port_bindings: any /* nat.PortMap */;
  /**
   * Mounts is a slice of mounts to be mounted in the container
   */
  mounts: any /* mount.Mount */[];
}
export interface Package {
  driver: Driver;
  driver_config: { [key: string]: any};
  registry_url_base: string;
  registry_app_id: string;
  registry_tag: string;
}

//////////
// source: process.go

export type ProcessID = string;
export type Driver = string;
export const DriverUnknown: Driver = "unknown";
export const DriverNoop: Driver = "noop";
export const DriverDocker: Driver = "docker";
export const DriverWeb: Driver = "web";
/**
 * Types related to running processes, mostly used by internal/process
 */
export interface Process {
  id: ProcessID;
  app_id: string;
  user_id: string;
  created: string;
  driver: Driver;
}

//////////
// source: reverse_proxy.go

/**
 * ReverseProxyRule matches a URL path to a target of the given type.
 * There are two types of rules currently:
 *  1. File server: serves files from a given directory (useful for serving websites from Habitat)
 *  2. Redirect: redirects to a given URL (useful for exposing APIs for Habitat applications)
 * The matcher field represents the path that the rule should match.
 * The semantics of the target field changes depending on the type. For file servers, it represents the
 * path to the directory to serve files from. For redirects, it represents the URL to redirect to.
 */
export interface ReverseProxyRule {
  id: string;
  type: ReverseProxyRuleType;
  matcher: string;
  target: string;
  app_id: string;
}
export type ReverseProxyRuleType = string;
export const ProxyRuleFileServer: ReverseProxyRuleType = "file";
export const ProxyRuleRedirect: ReverseProxyRuleType = "redirect";
export const ProxyRuleEmbeddedFrontend: ReverseProxyRuleType = "embedded_frontend";

//////////
// source: schema.go

export const SchemaName = "node";
export const CurrentVersion = "v0.0.7";
export const LatestVersion = "v0.0.7";
export interface State {
  node_id: string;
  name: string;
  certificate: string; // TODO turn this into b64
  schema_version: string;
  test_field?: string;
  users: { [key: string]: User | undefined};
  /**
   * A set of running processes that a node can restore to on startup.
   */
  processes: { [key: ProcessID]: Process | undefined};
  app_installations: { [key: string]: AppInstallation | undefined};
  reverse_proxy_rules?: { [key: string]: ReverseProxyRule | undefined};
}
export interface User {
  id: string;
  username: string;
  certificate: string; // TODO turn this into b64
  atproto_did?: string;
}
export interface NodeSchema {
}
