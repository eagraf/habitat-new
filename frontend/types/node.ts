// Code generated by tygo. DO NOT EDIT.

//////////
// source: core.go

export const AppLifecycleStateInstalling = "installing";
export const AppLifecycleStateInstalled = "installed";
export interface Package {
  driver: string;
  driver_config: { [key: string]: any};
  registry_url_base: string;
  registry_app_id: string;
  registry_tag: string;
}
/**
 * TODO some fields should be ignored by the REST api
 */
export interface AppInstallation {
  id: string;
  user_id: string;
  name: string;
  version: string;
  Package: Package;
}
export const ProcessStateStarting = "starting";
export const ProcessStateRunning = "running";
export interface Process {
  id: string;
  app_id: string;
  user_id: string;
  created: string;
  driver: string;
}
/**
 * ReverseProxyRule matches a URL path to a target of the given type.
 * There are two types of rules currently:
 *  1. File server: serves files from a given directory (useful for serving websites from Habitat)
 *  2. Redirect: redirects to a given URL (useful for exposing APIs for Habitat applications)
 * The matcher field represents the path that the rule should match.
 * The semantics of the target field changes depending on the type. For file servers, it represents the
 * path to the directory to serve files from. For redirects, it represents the URL to redirect to.
 */
export interface ReverseProxyRule {
  id: string;
  type: ReverseProxyRuleType;
  matcher: string;
  target: string;
  app_id: string;
  fishtail_ingest_config?: FishtailIngestConfig;
}
export interface FishtailIngestConfig {
  subscribed_collections: (FishtailSubscription | undefined)[];
}
export interface FishtailSubscription {
  lexicon: string;
}
export type ReverseProxyRuleType = string;
export const ProxyRuleFileServer: ReverseProxyRuleType = "file";
export const ProxyRuleRedirect: ReverseProxyRuleType = "redirect";
export const ProxyRuleEmbeddedFrontend: ReverseProxyRuleType = "embedded_frontend";
export const ProxyRuleFishtailIngest: ReverseProxyRuleType = "fishtail_ingest";

//////////
// source: schema.go

export const SchemaName = "node";
export const CurrentVersion = "v0.0.7";
export const LatestVersion = "v0.0.7";
export interface State {
  node_id: string;
  name: string;
  certificate: string; // TODO turn this into b64
  schema_version: string;
  test_field?: string;
  users: { [key: string]: User | undefined};
  processes: { [key: string]: ProcessState | undefined};
  app_installations: { [key: string]: AppInstallationState | undefined};
  reverse_proxy_rules?: { [key: string]: ReverseProxyRule | undefined};
}
export interface User {
  id: string;
  username: string;
  certificate: string; // TODO turn this into b64
  atproto_did?: string;
}
export const AppStateInstalling = "installing";
export const AppStateInstalled = "installed";
export const AppStateUninstalled = "uninstalled";
export interface AppInstallationState extends AppInstallation {
  state: string;
}
export interface ProcessState extends Process {
  state: string;
  ext_driver_id: string;
}
export interface NodeSchema {
}
