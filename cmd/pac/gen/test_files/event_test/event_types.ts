// Generated TypeScript types from atproto lexicon: community.lexicon.calendar.event
// Generated by pac typegen

/**
 * The event has been created and scheduled.
 */
export type Scheduled = any;

/**
 * The event has been postponed and a new start date has not been set.
 */
export type Postponed = any;

/**
 * The status of the event.
 */
export type Status = 'community.lexicon.calendar.event#cancelled' | 'community.lexicon.calendar.event#planned' | 'community.lexicon.calendar.event#postponed' | 'community.lexicon.calendar.event#rescheduled' | 'community.lexicon.calendar.event#scheduled';

/**
 * The event has been created, but not finalized.
 */
export type Planned = any;

/**
 * The event has been rescheduled.
 */
export type Rescheduled = any;

/**
 * The event has been cancelled.
 */
export type Cancelled = any;

/**
 * A virtual event that takes place online.
 */
export type Virtual = any;

/**
 * A hybrid event that takes place both online and offline.
 */
export type Hybrid = any;

/**
 * The mode of the event.
 */
export type Mode = 'community.lexicon.calendar.event#hybrid' | 'community.lexicon.calendar.event#inperson' | 'community.lexicon.calendar.event#virtual';

/**
 * An in-person event that takes place offline.
 */
export type Inperson = any;

/**
 * A URI associated with the event.
 */
export interface Uri {
}

/**
 * A calendar event.
 */
export interface Event {
  /**
   * The type identifier for this record
   */
  $type: 'tid';

  /**
   * Client-declared timestamp when the event was created.
   */
  createdAt: string;
  /**
   * Client-declared timestamp when the event ends.
   */
  endsAt?: string;
  /**
   * The locations where the event takes place.
   */
  locations?: any[];
  /**
   * The attendance mode of the event.
   */
  mode?: Mode;
  /**
   * The name of the event.
   */
  name: string;
  /**
   * Client-declared timestamp when the event starts.
   */
  startsAt?: string;
  /**
   * The status of the event.
   */
  status?: Status;
  /**
   * The description of the event.
   */
  description?: string;
  /**
   * URIs associated with the event.
   */
  uris?: Uri[];
}

