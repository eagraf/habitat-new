// Generated TypeScript client from atproto lexicon: community.lexicon.calendar.event
// Generated by pac clientgen

import type { HabitatClient } from '../sdk/atproto';
import type { CreateRecordResponse, GetRecordResponse, ListRecordsResponse } from '../sdk/atproto';
import type { Event } from '../types/event_types';

export const createEventRecord = async (client: HabitatClient, record: Event): Promise<CreateRecordResponse> => {
    const response = await client.createRecord<Event>(
        'community.lexicon.calendar.event',
        record
    );
    return response;
};

export const listEvents = async (client: HabitatClient, repo?: string): Promise<ListRecordsResponse<Event>> => {
    const response = await client.listRecords<Event>('community.lexicon.calendar.event', undefined, undefined, repo);
    return response;
};

export const getEventRecord = async (client: HabitatClient, rkey: string, repo?: string): Promise<GetRecordResponse<Event>> => {
    const response = await client.getRecord<Event>('community.lexicon.calendar.event', rkey, undefined, repo);
    return response;
};


// Convenience functions for private record operations
export const putPrivateEventRecord = async (client: HabitatClient, record: Event, rkey?: string): Promise<CreateRecordResponse> => {
    const response = await client.putPrivateRecord<Event>(
        'community.lexicon.calendar.event',
        record,
        rkey
    );
    return response;
};

export const getPrivateEventRecord = async (client: HabitatClient, rkey: string, repo?: string): Promise<GetRecordResponse<Event>> => {
    const response = await client.getPrivateRecord<Event>('community.lexicon.calendar.event', rkey, undefined, repo);
    return response;
};

export const listPrivateEvents = async (client: HabitatClient, repo?: string): Promise<ListRecordsResponse<Event>> => {
    const response = await client.listPrivateRecords<Event>('community.lexicon.calendar.event', undefined, undefined, repo);
    return response;
};
