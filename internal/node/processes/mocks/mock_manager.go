// Code generated by MockGen. DO NOT EDIT.
// Source: internal/node/processes/manager.go
//
// Generated by this command:
//
//	mockgen -source=internal/node/processes/manager.go -package mocks -destination=internal/node/processes/mocks/mock_manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	node "github.com/eagraf/habitat-new/core/state/node"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessManager is a mock of ProcessManager interface.
type MockProcessManager struct {
	ctrl     *gomock.Controller
	recorder *MockProcessManagerMockRecorder
}

// MockProcessManagerMockRecorder is the mock recorder for MockProcessManager.
type MockProcessManagerMockRecorder struct {
	mock *MockProcessManager
}

// NewMockProcessManager creates a new mock instance.
func NewMockProcessManager(ctrl *gomock.Controller) *MockProcessManager {
	mock := &MockProcessManager{ctrl: ctrl}
	mock.recorder = &MockProcessManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessManager) EXPECT() *MockProcessManagerMockRecorder {
	return m.recorder
}

// GetProcess mocks base method.
func (m *MockProcessManager) GetProcess(processID string) (*node.ProcessState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcess", processID)
	ret0, _ := ret[0].(*node.ProcessState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcess indicates an expected call of GetProcess.
func (mr *MockProcessManagerMockRecorder) GetProcess(processID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcess", reflect.TypeOf((*MockProcessManager)(nil).GetProcess), processID)
}

// ListProcesses mocks base method.
func (m *MockProcessManager) ListProcesses() ([]*node.ProcessState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProcesses")
	ret0, _ := ret[0].([]*node.ProcessState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcesses indicates an expected call of ListProcesses.
func (mr *MockProcessManagerMockRecorder) ListProcesses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcesses", reflect.TypeOf((*MockProcessManager)(nil).ListProcesses))
}

// StartProcess mocks base method.
func (m *MockProcessManager) StartProcess(arg0 *node.Process, arg1 *node.AppInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockProcessManagerMockRecorder) StartProcess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockProcessManager)(nil).StartProcess), arg0, arg1)
}

// StopProcess mocks base method.
func (m *MockProcessManager) StopProcess(extProcessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProcess", extProcessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopProcess indicates an expected call of StopProcess.
func (mr *MockProcessManagerMockRecorder) StopProcess(extProcessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcess", reflect.TypeOf((*MockProcessManager)(nil).StopProcess), extProcessID)
}

// MockProcessDriver is a mock of ProcessDriver interface.
type MockProcessDriver struct {
	ctrl     *gomock.Controller
	recorder *MockProcessDriverMockRecorder
}

// MockProcessDriverMockRecorder is the mock recorder for MockProcessDriver.
type MockProcessDriverMockRecorder struct {
	mock *MockProcessDriver
}

// NewMockProcessDriver creates a new mock instance.
func NewMockProcessDriver(ctrl *gomock.Controller) *MockProcessDriver {
	mock := &MockProcessDriver{ctrl: ctrl}
	mock.recorder = &MockProcessDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessDriver) EXPECT() *MockProcessDriverMockRecorder {
	return m.recorder
}

// StartProcess mocks base method.
func (m *MockProcessDriver) StartProcess(arg0 *node.Process, arg1 *node.AppInstallation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockProcessDriverMockRecorder) StartProcess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockProcessDriver)(nil).StartProcess), arg0, arg1)
}

// StopProcess mocks base method.
func (m *MockProcessDriver) StopProcess(extProcessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProcess", extProcessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopProcess indicates an expected call of StopProcess.
func (mr *MockProcessDriverMockRecorder) StopProcess(extProcessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcess", reflect.TypeOf((*MockProcessDriver)(nil).StopProcess), extProcessID)
}

// Type mocks base method.
func (m *MockProcessDriver) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockProcessDriverMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockProcessDriver)(nil).Type))
}
