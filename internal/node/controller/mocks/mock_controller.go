// Code generated by MockGen. DO NOT EDIT.
// Source: internal/node/controller/controller.go
//
// Generated by this command:
//
//	mockgen -source=internal/node/controller/controller.go -package mocks -destination=internal/node/controller/mocks/mock_controller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/eagraf/habitat-new/core/api"
	node "github.com/eagraf/habitat-new/core/state/node"
	hdb "github.com/eagraf/habitat-new/internal/node/hdb"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeController is a mock of NodeController interface.
type MockNodeController struct {
	ctrl     *gomock.Controller
	recorder *MockNodeControllerMockRecorder
	isgomock struct{}
}

// MockNodeControllerMockRecorder is the mock recorder for MockNodeController.
type MockNodeControllerMockRecorder struct {
	mock *MockNodeController
}

// NewMockNodeController creates a new mock instance.
func NewMockNodeController(ctrl *gomock.Controller) *MockNodeController {
	mock := &MockNodeController{ctrl: ctrl}
	mock.recorder = &MockNodeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeController) EXPECT() *MockNodeControllerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockNodeController) AddUser(userID, email, handle, password, certificate string) (types.PDSCreateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", userID, email, handle, password, certificate)
	ret0, _ := ret[0].(types.PDSCreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockNodeControllerMockRecorder) AddUser(userID, email, handle, password, certificate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockNodeController)(nil).AddUser), userID, email, handle, password, certificate)
}

// GetUserByUsername mocks base method.
func (m *MockNodeController) GetUserByUsername(username string) (*node.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*node.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockNodeControllerMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockNodeController)(nil).GetUserByUsername), username)
}

// InitializeNodeDB mocks base method.
func (m *MockNodeController) InitializeNodeDB(ctx context.Context, transitions []hdb.Transition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeNodeDB", ctx, transitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeNodeDB indicates an expected call of InitializeNodeDB.
func (mr *MockNodeControllerMockRecorder) InitializeNodeDB(ctx, transitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeNodeDB", reflect.TypeOf((*MockNodeController)(nil).InitializeNodeDB), ctx, transitions)
}

// MigrateNodeDB mocks base method.
func (m *MockNodeController) MigrateNodeDB(targetVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateNodeDB", targetVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateNodeDB indicates an expected call of MigrateNodeDB.
func (mr *MockNodeControllerMockRecorder) MigrateNodeDB(targetVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateNodeDB", reflect.TypeOf((*MockNodeController)(nil).MigrateNodeDB), targetVersion)
}
