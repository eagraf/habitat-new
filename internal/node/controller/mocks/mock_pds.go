// Code generated by MockGen. DO NOT EDIT.
// Source: internal/node/controller/pds.go
//
// Generated by this command:
//
//	mockgen -source=internal/node/controller/pds.go -package mocks -destination=internal/node/controller/mocks/mock_pds.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/eagraf/habitat-new/core/api"
	gomock "go.uber.org/mock/gomock"
)

// MockPDSClientI is a mock of PDSClientI interface.
type MockPDSClientI struct {
	ctrl     *gomock.Controller
	recorder *MockPDSClientIMockRecorder
	isgomock struct{}
}

// MockPDSClientIMockRecorder is the mock recorder for MockPDSClientI.
type MockPDSClientIMockRecorder struct {
	mock *MockPDSClientI
}

// NewMockPDSClientI creates a new mock instance.
func NewMockPDSClientI(ctrl *gomock.Controller) *MockPDSClientI {
	mock := &MockPDSClientI{ctrl: ctrl}
	mock.recorder = &MockPDSClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDSClientI) EXPECT() *MockPDSClientIMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockPDSClientI) CreateAccount(email, handle, password string) (types.PDSCreateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", email, handle, password)
	ret0, _ := ret[0].(types.PDSCreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockPDSClientIMockRecorder) CreateAccount(email, handle, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockPDSClientI)(nil).CreateAccount), email, handle, password)
}

// CreateSession mocks base method.
func (m *MockPDSClientI) CreateSession(identifier, password string) (types.PDSCreateSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", identifier, password)
	ret0, _ := ret[0].(types.PDSCreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockPDSClientIMockRecorder) CreateSession(identifier, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockPDSClientI)(nil).CreateSession), identifier, password)
}
