// Code generated by MockGen. DO NOT EDIT.
// Source: internal/node/hdb/dbms.go
//
// Generated by this command:
//
//	mockgen -source=internal/node/hdb/dbms.go -package mocks --destination internal/node/hdb/mocks/mock_dbms.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	hdb "github.com/eagraf/habitat-new/internal/node/hdb"
	gomock "go.uber.org/mock/gomock"
)

// MockHDBManager is a mock of HDBManager interface.
type MockHDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockHDBManagerMockRecorder
	isgomock struct{}
}

// MockHDBManagerMockRecorder is the mock recorder for MockHDBManager.
type MockHDBManagerMockRecorder struct {
	mock *MockHDBManager
}

// NewMockHDBManager creates a new mock instance.
func NewMockHDBManager(ctrl *gomock.Controller) *MockHDBManager {
	mock := &MockHDBManager{ctrl: ctrl}
	mock.recorder = &MockHDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHDBManager) EXPECT() *MockHDBManagerMockRecorder {
	return m.recorder
}

// CreateDatabase mocks base method.
func (m *MockHDBManager) CreateDatabase(ctx context.Context, name, schemaType string, initialTransitions []hdb.Transition) (hdb.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", ctx, name, schemaType, initialTransitions)
	ret0, _ := ret[0].(hdb.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockHDBManagerMockRecorder) CreateDatabase(ctx, name, schemaType, initialTransitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockHDBManager)(nil).CreateDatabase), ctx, name, schemaType, initialTransitions)
}

// GetDatabaseClientByName mocks base method.
func (m *MockHDBManager) GetDatabaseClientByName(name string) (hdb.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseClientByName", name)
	ret0, _ := ret[0].(hdb.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseClientByName indicates an expected call of GetDatabaseClientByName.
func (mr *MockHDBManagerMockRecorder) GetDatabaseClientByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseClientByName", reflect.TypeOf((*MockHDBManager)(nil).GetDatabaseClientByName), name)
}

// RestartDBs mocks base method.
func (m *MockHDBManager) RestartDBs(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartDBs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartDBs indicates an expected call of RestartDBs.
func (mr *MockHDBManagerMockRecorder) RestartDBs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartDBs", reflect.TypeOf((*MockHDBManager)(nil).RestartDBs), arg0)
}

// Start mocks base method.
func (m *MockHDBManager) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockHDBManagerMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHDBManager)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockHDBManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHDBManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHDBManager)(nil).Stop))
}

// MockDatabaseConfig is a mock of DatabaseConfig interface.
type MockDatabaseConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConfigMockRecorder
	isgomock struct{}
}

// MockDatabaseConfigMockRecorder is the mock recorder for MockDatabaseConfig.
type MockDatabaseConfigMockRecorder struct {
	mock *MockDatabaseConfig
}

// NewMockDatabaseConfig creates a new mock instance.
func NewMockDatabaseConfig(ctrl *gomock.Controller) *MockDatabaseConfig {
	mock := &MockDatabaseConfig{ctrl: ctrl}
	mock.recorder = &MockDatabaseConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseConfig) EXPECT() *MockDatabaseConfigMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockDatabaseConfig) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDatabaseConfigMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDatabaseConfig)(nil).ID))
}

// Path mocks base method.
func (m *MockDatabaseConfig) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockDatabaseConfigMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockDatabaseConfig)(nil).Path))
}
