package fishtail

import (
	"bytes"
	"context"
	"encoding/base64"
	"testing"

	"github.com/bluesky-social/indigo/api/atproto"
	"github.com/bluesky-social/indigo/lex/util"
	"github.com/bluesky-social/indigo/repo"
	"github.com/eagraf/habitat-new/internal/node/config"
	"github.com/ipfs/go-cid"
	"github.com/multiformats/go-multicodec"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

/*

{
  "blobs": null,
  "blocks": {
    "$bytes": "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"
  },
  "commit": {
    "$link": "bafyreidks45xq47ybhuxd5bxo6a7lj5pkupodezh7p54kklwbzx4ebtfs4"
  },
  "ops": [
    {
      "action": "create",
      "cid": {
        "$link": "bafyreifpjbvvf2t7xsr2enwnuldbbs7wcet2c5njs7pol6xu4ugvzgr3wi"
      },
      "path": "app.bsky.feed.like/3laxcvii5rs2e"
    }
  ],
  "prev": {
    "$link": "bafyreiafqflufx23kdd7qcgtjcmixki6aqoy6h23ofqxt5eudlg5nknlfe"
  },
  "rebase": false,
  "repo": "did:plc:l3weetptg3ulkbbn7w5zpu2r",
  "rev": "3laxcviifls2e",
  "seq": 371,
  "since": "3laxcqdrnjs2e",
  "time": "2024-11-15T02:20:45.601Z",
  "tooBig": false
}
*/

const blocksB64 = "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"

func TestHandleRepoCommit(t *testing.T) {
	ctx := context.Background()

	v := viper.New()
	nodeConfig, err := config.NewTestNodeConfig(v)
	require.NoError(t, err)

	// Create test fishtail service
	fishtail := &Fishtail{
		ingester:              NewIngester(nil),
		atprotoEventPublisher: NewATProtoEventPublisher(nodeConfig),
	}

	blockBytes, err := base64.StdEncoding.DecodeString(blocksB64)
	assert.NoError(t, err)

	// Read the CAR bytes to verify contents
	rr, err := repo.ReadRepoFromCar(ctx, bytes.NewReader(blockBytes))
	require.NoError(t, err)
	t.Logf("CAR roots: %v", rr)

	newLinkCid, err := cid.Decode("bafyreifpjbvvf2t7xsr2enwnuldbbs7wcet2c5njs7pol6xu4ugvzgr3wi")
	assert.NoError(t, err)
	link := util.LexLink(newLinkCid)

	prevLinkCid, err := cid.Decode("bafyreiafqflufx23kdd7qcgtjcmixki6aqoy6h23ofqxt5eudlg5nknlfe")
	assert.NoError(t, err)
	prevLink := util.LexLink(prevLinkCid)

	// Create test commit event
	evt := &atproto.SyncSubscribeRepos_Commit{
		Ops: []*atproto.SyncSubscribeRepos_RepoOp{
			{
				Action: "create",
				Path:   "app.bsky.feed.like/3laxcvii5rs2e",
				Cid:    &link,
			},
		},
		Prev:   &prevLink,
		Blocks: blockBytes,
		TooBig: false,
		Commit: util.LexLink(cid.NewCidV1(uint64(multicodec.Multicodec), []byte("bafyreiafqflufx23kdd7qcgtjcmixki6aqoy6h23ofqxt5eudlg5nknlfe"))),
		Rebase: false,
		Repo:   "did:plc:l3weetptg3ulkbbn7w5zpu2r",
		Rev:    "3laxcviifls2e",
		Seq:    371,
		Time:   "2024-11-15T02:20:45.601Z",
	}

	// Test handling invalid blocks
	evt.TooBig = false
	evt.Blocks = []byte("invalid")
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err) // Should not error but log warning

	// Verify ingester queue is empty since all events were invalid
	assert.Equal(t, 0, len(fishtail.ingester.chainQueue))

	// Test handling too big event
	evt.TooBig = true
	evt.Blocks = blockBytes
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err)
	assert.Equal(t, 0, len(fishtail.ingester.chainQueue))

	// Test handling valid event
	evt.Blocks = blockBytes
	evt.TooBig = false
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err)
	assert.Equal(t, 1, len(fishtail.ingester.chainQueue))

	// Pop from the queue and verify the chain is correct
	chain := <-fishtail.ingester.chainQueue
	assert.Equal(t, "at://did:plc:l3weetptg3ulkbbn7w5zpu2r/app.bsky.feed.like/3laxcvii5rs2e", chain.initialURI)
	assert.Equal(t, "bafyreifpjbvvf2t7xsr2enwnuldbbs7wcet2c5njs7pol6xu4ugvzgr3wi", chain.initialCID)
	assert.Equal(t, 0, len(chain.seen))

}
