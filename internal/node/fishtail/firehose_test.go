package fishtail

import (
	"context"
	"encoding/base64"
	"testing"

	"github.com/bluesky-social/indigo/api/atproto"
	"github.com/bluesky-social/indigo/lex/util"
	"github.com/eagraf/habitat-new/internal/node/config"
	"github.com/ipfs/go-cid"
	"github.com/multiformats/go-multicodec"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const blocksB64 = "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am1raXdrMmJhcBgaYXT2YXbYKlglAAFxEiC0aaoM5Jwol582gbcEd1pCAeoZtdEj3UDatXgjsMBaSKRha0d3cmJ4azJiYXAYHWF09mF22CpYJQABcRIg+NuMJXKq7NYGJTVMgORiFxtPR3Xjb2BB3cHezrldysqkYWtIbm1nZmVjMmJhcBgcYXT2YXbYKlglAAFxEiBer4E4OAev4unLeWb6wFIvqwJ69ZeA70PR8I1pFsk4o6Rha0p5dGJsNXFxazJiYXAYGmF09mF22CpYJQABcRIgncAZWb63F9lBfpiqxy6kPKHtXbBsXabSi4V0LLk1wlakYWtIZ3lrYWlzMmJhcBgcYXT2YXbYKlglAAFxEiDFoSdIPr6hAvUYik7xQIjhwlj8fcbMyXIFTH/rvE0KkaRha0hpZHhpa2syYmFwGBxhdPZhdtgqWCUAAXESIPhNJVaBZszeQBbDdXYb9VC0h7MJf6R76Xoyh1RR7n6BpGFrSXU1NWdpeWMyYmFwGBthdPZhdtgqWCUAAXESIGv2FT6ztWYf/UDXB3mU5dfVZC+kUr5vX2xooYh9CkzzpGFrSDZiYXBwMjJiYXAYHGF09mF22CpYJQABcRIg6/pVb6vpY6Ck7eRQPMsNE95W1/989czBQVKwv9GTrUukYWtHcWV3c3MyYmFwGB1hdPZhdtgqWCUAAXESIAGomqknR52jpzTF0PTkScJ55NB3kMiMKet2cJFyz5ROpGFrSGtwamxuMjJiYXAYHGF09mF22CpYJQABcRIgH+t7H0wvd7gZsUXEH3GGR7HtEMFIw6YK0rrwkwCkXCWkYWtJeHl2cGc2azJiYXAYG2F09mF22CpYJQABcRIgutm+dSk4JXfiamKYrGnEoyzI4DaUqJZcc22QDY0aZDOkYWtIenRkZDZzMmJhcBgcYXT2YXbYKlglAAFxEiD5hYx/CoCmHLq+lGVFunKXyBLuA0p9rABgiptLLPY36KRha0d2NndnMjJiYXAYHWF09mF22CpYJQABcRIgiiJKRTneuTdTqAqG3Qx+fI4K/WNqBJXGQcK5dUdaLeOkYWtGcGZyMjJiYXAYHmF09mF22CpYJQABcRIgG/lipsZXvBcEM56YVUicGY1e610Gx/IeaI1gunVWh8RhbPb4AQFxEiBwnD7giJt+LT/31r/YVQ/6fM7Lx/SJxClydoKxhvDiiqNlJHR5cGVyYXBwLmJza3kuZmVlZC5saWtlZ3N1YmplY3SiY2NpZHg7YmFmeXJlaWNybmgzYzZwYXM1d2U0enEzZ3NvNDVtMzd0NnJ3d2w0Y3JzY3B5N3NsYTVnZXZmYWF3cWVjdXJpeEZhdDovL2RpZDpwbGM6aWhtdXRtNDY2bXQ0ZXJxNmVjbTZsZ2F1L2FwcC5ic2t5LmZlZWQucG9zdC8zbGFrM2k0NWJhMjJoaWNyZWF0ZWRBdHgYMjAyNC0xMS0xMFQwNTozNDoxOC4xMjVa4AEBcRIgtlEhTVc2HBaGfKRGGwEoJSVWSvtWCaN5Gd+NoN3a80ymY2RpZHggZGlkOnBsYzpsM3dlZXRwdGczdWxrYmJuN3c1enB1MnJjcmV2bTNsYWwzZXh4YjMyMmVjc2lnWEAymmIHYhFxBHTGJUkIM5pdsBRxFgi+rE7xrkeh4gw8VRnoqQqndZNd/LF9hYpN8pr86C2HV262wTk3c2BIV31OZGRhdGHYKlglAAFxEiBWN6ycRu+/eFD0sPcsKxnYwIEuTvHscDstg7pMtg67smRwcmV29md2ZXJzaW9uAw=="

func TestHandleRepoCommit(t *testing.T) {
	ctx := context.Background()

	v := viper.New()
	nodeConfig, err := config.NewTestNodeConfig(v)
	require.NoError(t, err)

	// Create test fishtail service
	fishtail := &Fishtail{
		ingester:              NewIngester(nil),
		atprotoEventPublisher: NewATProtoEventPublisher(nodeConfig),
	}

	blockBytes, err := base64.StdEncoding.DecodeString(blocksB64)
	assert.NoError(t, err)

	// Create test commit event
	evt := &atproto.SyncSubscribeRepos_Commit{
		Ops: []*atproto.SyncSubscribeRepos_RepoOp{
			{
				Action: "create",
				Path:   "app.bsky.feed.post/testpost",
				// CID would normally be set but we're skipping block verification
			},
		},
		Blocks: blockBytes,
		TooBig: false,
		Commit: util.LexLink(cid.NewCidV1(uint64(multicodec.Raw), []byte("bafyreibifbgee7ay4x32bbppn7szmwruyueq25fspnavm35xo5ijfvzf3y"))),
		Rebase: false,
		Repo:   "did:plc:l3weetptg3ulkbbn7w5zpu2r",
		Rev:    "3lal2xpbouc2e",
		Seq:    339,
		Time:   "2024-11-10T05:26:53.031Z",
	}

	// Test handling too big event
	evt.TooBig = true
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err)

	// Test handling invalid blocks
	evt.TooBig = false
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err) // Should not error but log warning

	// Verify ingester queue is empty since all events were invalid
	assert.Equal(t, 0, len(fishtail.ingester.chainQueue))

	// Test handling valid event
	evt.Blocks = blockBytes
	evt.TooBig = false
	err = fishtail.handleRepoCommit(ctx, evt)
	require.NoError(t, err)
	assert.Equal(t, 1, len(fishtail.ingester.chainQueue))

	// Pop from the queue and verify the chain is correct

}
